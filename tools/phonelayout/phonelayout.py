import xml.etree.ElementTree
import sys

class LayoutToCodeTranslator:
    def __init__(self, xmlPath, headerPath, sourcePath):
        self.root = xml.etree.ElementTree.parse(xmlPath).getroot()
        self.mockWidth = float(self.root.attrib['width'])
        self.mockHeight = float(self.root.attrib['height'])
        self.mockStatusBarHeight = float(self.root.attrib['statusBarHeight'])
        self.root.parent = None
        self.structOutputs = []
        self.bodyOutputs = []
        self.headerPath = headerPath
        self.sourcePath = sourcePath

    def hor(self, width):
        if width == 0:
            return '0'
        if width == self.mockWidth:
            return 'page->displayWidth'
        return 'page->displayWidth * {}'.format(width / self.mockWidth)

    def ver(self, height):
        if height == 0:
            return '0'
        if height == self.mockHeight:
            return 'page->displayHeight'
        return 'page->displayHeight * {}'.format(height / self.mockHeight)

    def getElementWidth(self, elem):
        loop = elem
        while None != loop:
            if 'width' in loop.attrib:
                return float(loop.attrib['width'])
            loop = loop.parent
        return 0

    def getElementHeight(self, elem):
        loop = elem
        while None != loop:
            if 'height' in loop.attrib:
                return float(loop.attrib['height'])
            loop = loop.parent
        return 0

    def isElementLayoutHorizontal(self, elem):
        if 'isHorizontal' in elem.attrib:
            return '0' != elem.attrib['isHorizontal'] and \
                'false' != string.lower(elem.attrib['isHorizontal'])
        return False

    def getElementLeft(self, elem):
        if 'left' in elem.attrib:
            return float(elem.attrib['left'])
        if None != elem.parent and self.isElementLayoutHorizontal(elem.parent):
            return elem.parent.attrib['offsetX']
        return 0

    def getElementTop(self, elem):
        if 'top' in elem.attrib:
            return float(elem.attrib['top']) - self.mockStatusBarHeight
        if None != elem.parent and not self.isElementLayoutHorizontal(elem.parent):
            return elem.parent.attrib['offsetY']
        return 0

    def outputElement(self, elem, parent):
        elem.parent = parent
        if 'offsetX' not in elem.parent.attrib:
            elem.parent.attrib['offsetX'] = 0
        if 'offsetY' not in elem.parent.attrib:
            elem.parent.attrib['offsetY'] = 0
        self.structOutputs.append('int {};'.format(elem.tag))
        self.bodyOutputs.append('page->{} = phoneCreateContainerView(0, 0);'.format(elem.tag))
        x = self.getElementLeft(elem) - self.getElementLeft(elem.parent);
        y = self.getElementTop(elem) - self.getElementTop(elem.parent);
        width = self.getElementWidth(elem)
        height = self.getElementHeight(elem)
        self.bodyOutputs.append('phoneSetViewFrame(page->{}, dp({}), dp({}), dp({}), dp({}));'.
            format(elem.tag, self.hor(x), self.ver(y), self.hor(width), self.ver(height)))
        if 'backgroundColor' in elem.attrib:
            self.bodyOutputs.append('phoneSetViewBackgroundColor(page->{}, 0x{});'.format(
                elem.tag, elem.attrib['backgroundColor']
            ))
        if (self.isElementLayoutHorizontal(elem.parent)):
            elem.parent.attrib['offsetX'] += width
        else:
            elem.parent.attrib['offsetY'] += height
            print 'parent:{} add height:{} = offsetY:{}'.format(parent, height, parent.attrib['offsetY'])
        for child in elem:
            self.outputElement(child, elem)

    def outputWarn(self, f):
        f.write('// !!! DONT MODIFY THIS FILE DIRECTLY OR YOU WILL LOST THE CHANGE !!!\n')
        f.write('// THE FILE WAS GENERATED BY github.com/huxingyi/libphone/tools/phonelayout\n')

    def output(self):
        for child in self.root:
            self.outputElement(child, self.root)
        with open(self.headerPath, 'w') as header:
            self.outputWarn(header)
            header.write('\n')
            header.write('#ifndef __{}_H__\n'.format(self.root.tag))
            header.write('#define __{}_H__\n'.format(self.root.tag))
            header.write('\n')
            header.write('typedef struct {} {{\n'.format(self.root.tag))
            header.write('  float displayWidth;\n')
            header.write('  float displayHeight;\n  ')
            header.write('\n  '.join(self.structOutputs))
            header.write('\n}} {};\n'.format(self.root.tag))
            header.write('\n')
            header.write('{} *{}Create(void);\n'.format(self.root.tag, self.root.tag))
            header.write('\n')
            header.write('#endif\n')
            header.write('\n')
        with open(self.sourcePath, 'w') as source:
            self.outputWarn(source)
            source.write('\n')
            source.write('#include "libphone.h"\n')
            source.write('#include "{}"\n'.format(self.headerPath))
            source.write('\n')
            source.write('{} *{}Create(void) {{\n'.format(self.root.tag, self.root.tag))
            source.write('  {} *page = ({} *)calloc(1, sizeof({}));\n'.format(self.root.tag, self.root.tag, self.root.tag))
            source.write('  page->displayWidth = phoneGetViewWidth(0);\n')
            source.write('  page->displayHeight = phoneGetViewHeight(0);\n')
            source.write('  ')
            source.write('\n  '.join(self.bodyOutputs))
            source.write('\n  return page;\n')
            source.write('}\n')
            source.write('\n')

if __name__ == "__main__":
    xmlPath = sys.argv[1]
    headerPath = sys.argv[2]
    sourcePath = sys.argv[3]
    trans = LayoutToCodeTranslator(xmlPath, headerPath, sourcePath)
    trans.output()
